The following is the text from the book introducing this project.
--------------------

At the beginning of a game of bridge, each player assigns a value to his or her hand
by counting points. Bridge players use these points in the first part of the game, the
“bidding,” to decide how high to bid. (A bid is a promise about how well you’ll do in the
rest of the game. If you succeed in meeting your bid you win, and if you don’t meet the
bid, you lose.) For example, if you have fewer than six points, you generally don’t bid
anything at all.

You’re going to write a computer program to look at a bridge hand and decide how
many points it’s worth. You won’t have to know anything about the rest of the game; we’ll
tell you the rules for counting points.

A bridge hand contains thirteen cards. Each ace in the hand is worth four points,
each king is worth three points, each queen two points, and each jack one. The other
cards, twos through tens, have no point value. So if your hand has two aces, a king, two
jacks, and eight other cards, it’s worth thirteen points.

A bridge hand might also have some “distribution” points, which are points having
to do with the distribution of the thirteen cards among the four suits. If your hand has
only two cards of a particular suit, then it is worth an extra point. If it has a “singleton,”
only one card of a particular suit, that’s worth two extra points. A “void,” no cards in a
particular suit, is worth three points.

In our program, we’ll represent a card by a word like h5 (five of hearts) or dk (king
of diamonds).* A hand will be a sentence of cards, like this:

(sa s10 s7 s6 s2 hq hj h9 ck c4 dk d9 d3)

This hand is worth 14 points: ace of spades (4), plus queen of hearts (2), plus jack
of hearts (1), plus king of clubs (3), plus king of diamonds (3), plus one more for having
only two clubs.

To find the suit of a card, we take its first, and to find the rank, we take the
butfirst. (Why not the last?)

We have a particular program structure in mind. We’ll describe all of the procedures
you need to write; if you turn each description into a working procedure, then you
should have a complete program. In writing each procedure, take advantage of the ones
you’ve already written. Our descriptions are ordered bottom-up, which means that for each
procedure you will already have written the helper procedures you need. (This ordering
will help you write the project, but it means that we’re beginning with small details. If
we were describing a project to help you understand its structure, we’d do it in top-down
order, starting with the most general procedures. We’ll do that in the next chapter, in
which we present a tic-tac-toe program as a larger Scheme programming example.)
